{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Markdown Guide",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2ojX_UwL8QDx"
      },
      "source": [
        "##Install BERT Vocabuary"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rXdsP-n679iV",
        "outputId": "fbb4b368-e9da-4b6f-d3d0-c53067e1f48e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "!pip install pytorch-pretrained-bert"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting pytorch-pretrained-bert\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d7/e0/c08d5553b89973d9a240605b9c12404bcf8227590de62bae27acbcfe076b/pytorch_pretrained_bert-0.6.2-py3-none-any.whl (123kB)\n",
            "\r\u001b[K     |██▋                             | 10kB 16.9MB/s eta 0:00:01\r\u001b[K     |█████▎                          | 20kB 24.1MB/s eta 0:00:01\r\u001b[K     |████████                        | 30kB 17.9MB/s eta 0:00:01\r\u001b[K     |██████████▋                     | 40kB 14.5MB/s eta 0:00:01\r\u001b[K     |█████████████▎                  | 51kB 13.6MB/s eta 0:00:01\r\u001b[K     |███████████████▉                | 61kB 13.2MB/s eta 0:00:01\r\u001b[K     |██████████████████▌             | 71kB 13.9MB/s eta 0:00:01\r\u001b[K     |█████████████████████▏          | 81kB 13.8MB/s eta 0:00:01\r\u001b[K     |███████████████████████▉        | 92kB 12.7MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▌     | 102kB 12.0MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▏  | 112kB 12.0MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▊| 122kB 12.0MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 133kB 12.0MB/s \n",
            "\u001b[?25hRequirement already satisfied: torch>=0.4.1 in /usr/local/lib/python3.6/dist-packages (from pytorch-pretrained-bert) (1.7.0+cu101)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.6/dist-packages (from pytorch-pretrained-bert) (4.41.1)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from pytorch-pretrained-bert) (1.19.5)\n",
            "Collecting boto3\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/29/3b/4da331f22280e6645c54c38b84d04f40858ae31298eecb1e3364c3add27e/boto3-1.17.3-py2.py3-none-any.whl (130kB)\n",
            "\u001b[K     |████████████████████████████████| 133kB 20.0MB/s \n",
            "\u001b[?25hRequirement already satisfied: regex in /usr/local/lib/python3.6/dist-packages (from pytorch-pretrained-bert) (2019.12.20)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from pytorch-pretrained-bert) (2.23.0)\n",
            "Requirement already satisfied: future in /usr/local/lib/python3.6/dist-packages (from torch>=0.4.1->pytorch-pretrained-bert) (0.16.0)\n",
            "Requirement already satisfied: dataclasses in /usr/local/lib/python3.6/dist-packages (from torch>=0.4.1->pytorch-pretrained-bert) (0.8)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.6/dist-packages (from torch>=0.4.1->pytorch-pretrained-bert) (3.7.4.3)\n",
            "Collecting botocore<1.21.0,>=1.20.3\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/8b/96/24f0e51870eb54701fa1b6f0249b31c3d1596c8e2fd9dcc5993ec9955266/botocore-1.20.3-py2.py3-none-any.whl (7.2MB)\n",
            "\u001b[K     |████████████████████████████████| 7.2MB 18.8MB/s \n",
            "\u001b[?25hCollecting jmespath<1.0.0,>=0.7.1\n",
            "  Downloading https://files.pythonhosted.org/packages/07/cb/5f001272b6faeb23c1c9e0acc04d48eaaf5c862c17709d20e3469c6e0139/jmespath-0.10.0-py2.py3-none-any.whl\n",
            "Collecting s3transfer<0.4.0,>=0.3.0\n",
            "\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ea/43/4b4a1b26eb03a429a4c37ca7fdf369d938bd60018fc194e94b8379b0c77c/s3transfer-0.3.4-py2.py3-none-any.whl (69kB)\n",
            "\u001b[K     |████████████████████████████████| 71kB 7.1MB/s \n",
            "\u001b[?25hRequirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->pytorch-pretrained-bert) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->pytorch-pretrained-bert) (2020.12.5)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->pytorch-pretrained-bert) (2.10)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->pytorch-pretrained-bert) (3.0.4)\n",
            "Requirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/local/lib/python3.6/dist-packages (from botocore<1.21.0,>=1.20.3->boto3->pytorch-pretrained-bert) (2.8.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil<3.0.0,>=2.1->botocore<1.21.0,>=1.20.3->boto3->pytorch-pretrained-bert) (1.15.0)\n",
            "\u001b[31mERROR: botocore 1.20.3 has requirement urllib3<1.27,>=1.25.4, but you'll have urllib3 1.24.3 which is incompatible.\u001b[0m\n",
            "Installing collected packages: jmespath, botocore, s3transfer, boto3, pytorch-pretrained-bert\n",
            "Successfully installed boto3-1.17.3 botocore-1.20.3 jmespath-0.10.0 pytorch-pretrained-bert-0.6.2 s3transfer-0.3.4\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h6EGmoS48rHY"
      },
      "source": [
        "import torch\r\n",
        "from pytorch_pretrained_bert import BertTokenizer\r\n",
        "\r\n",
        "#Load pre-trained model tokenizer (vocabulary)\r\n",
        "\r\n",
        "tokenizer = BertTokenizer.from_pretrained('bert-large-uncased')\r\n",
        "\r\n",
        "vocab = []\r\n",
        "for token in tokenizer.vocab.keys():\r\n",
        "  vocab.append([token, tokenizer.vocab[token]])"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H8mXvGBq97oa",
        "outputId": "02c8bccb-8ddc-418f-aa7f-10685284225f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "[token for token in vocab if token[0] == 'bert']"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[['bert', 14324]]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uKT6s5wmB2wX",
        "outputId": "304f7bb3-8706-49f8-cdc4-cb63d61ca8c3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 445
        }
      },
      "source": [
        "import matplotlib.pyplot as plt\r\n",
        "import seaborn as sns\r\n",
        "import numpy as np\r\n",
        "\r\n",
        "sns.set(style='darkgrid')\r\n",
        "\r\n",
        "#Increase the plot size and font size\r\n",
        "sns.set(font_scale=1.5)\r\n",
        "plt.rcParams['figure.figsize'] = (10,5)\r\n",
        "\r\n",
        "#Measure the length of every token in the vocab\r\n",
        "token_lengths = [len(token) for token in tokenizer.vocab.keys()]\r\n",
        "\r\n",
        "#Plot the number of tokens of each length\r\n",
        "sns.countplot(token_lengths)\r\n",
        "plt.title('Vocab Torken Lengths')\r\n",
        "plt.xlabel('Token Lenght')\r\n",
        "plt.ylabel('# of Tokens')\r\n",
        "\r\n",
        "print('Maximum token length', max(token_lengths))\r\n"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Maximum token lenght 18\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IBA2zrS6E5FP",
        "outputId": "3cb33785-9385-4041-b5ae-f592ba00c551",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "!pip install wget"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting wget\n",
            "  Downloading https://files.pythonhosted.org/packages/47/6a/62e288da7bcda82b935ff0c6cfe542970f04e29c756b0e147251b2fb251f/wget-3.2.zip\n",
            "Building wheels for collected packages: wget\n",
            "  Building wheel for wget (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for wget: filename=wget-3.2-cp36-none-any.whl size=9682 sha256=e47f2eff60098e5054564843bde833e46e6585b534859b0aa86e07b9a611cb0c\n",
            "  Stored in directory: /root/.cache/pip/wheels/40/15/30/7d8f7cea2902b4db79e3fea550d7d7b85ecb27ef992b618f3f\n",
            "Successfully built wget\n",
            "Installing collected packages: wget\n",
            "Successfully installed wget-3.2\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NfUkr_mqElxm",
        "outputId": "7c2dd8a1-1aa8-43b2-fb71-a84f5a40cacd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "import wget\r\n",
        "import random\r\n",
        "url = 'http://www.gutenberg.org/files/3201/files/NAMES.TXT'\r\n",
        "wget.download(url,'first-names.txt')"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'first-names.txt'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wbvuN4PhFp_Y",
        "outputId": "3eea9172-61b8-4cc6-b026-fb72c08b2bb0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "source": [
        "f = open('first-names.txt','rb')\r\n",
        "\r\n",
        "lines = f.readlines()\r\n",
        "f.close()\r\n",
        "\r\n",
        "for name in lines:\r\n",
        "  try:\r\n",
        "    print(tokenizer.vocab[name.rstrip().lower().decode('utf-8')])\r\n",
        "  except:\r\n",
        "      print(\"not found:\" + name.decode('utf-8'))\r\n"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "not found:Aaberg\r\n",
            "\n",
            "not found:Aalst\r\n",
            "\n",
            "not found:Aara\r\n",
            "\n",
            "not found:Aaren\r\n",
            "\n",
            "not found:Aarika\r\n",
            "\n",
            "7158\n",
            "not found:Aaronson\r\n",
            "\n",
            "11113\n",
            "19557\n",
            "not found:Abad\r\n",
            "\n",
            "not found:Abagael\r\n",
            "\n",
            "not found:Abagail\r\n",
            "\n",
            "not found:Abana\r\n",
            "\n",
            "not found:Abate\r\n",
            "\n",
            "not found:Abba\r\n",
            "\n",
            "not found:Abbate\r\n",
            "\n",
            "not found:Abbe\r\n",
            "\n",
            "6103\n",
            "not found:Abbi\r\n",
            "\n",
            "not found:Abbie\r\n",
            "\n",
            "11428\n",
            "not found:Abbotsen\r\n",
            "\n",
            "not found:Abbotson\r\n",
            "\n",
            "not found:Abbotsun\r\n",
            "\n",
            "14455\n",
            "not found:Abbottson\r\n",
            "\n",
            "9460\n",
            "not found:Abbye\r\n",
            "\n",
            "not found:Abdel\r\n",
            "\n",
            "not found:Abdella\r\n",
            "\n",
            "not found:Abdu\r\n",
            "\n",
            "10298\n",
            "not found:Abdulla\r\n",
            "\n",
            "14863\n",
            "not found:Abebi\r\n",
            "\n",
            "16768\n",
            "not found:Abelard\r\n",
            "\n",
            "not found:Abell\r\n",
            "\n",
            "not found:Abercromby\r\n",
            "\n",
            "not found:Abernathy\r\n",
            "\n",
            "not found:Abernon\r\n",
            "\n",
            "not found:Abert\r\n",
            "\n",
            "not found:Abeu\r\n",
            "\n",
            "not found:Abey\r\n",
            "\n",
            "not found:Abie\r\n",
            "\n",
            "not found:Abigael\r\n",
            "\n",
            "15983\n",
            "not found:Abigale\r\n",
            "\n",
            "not found:Abijah\r\n",
            "\n",
            "not found:Abisha\r\n",
            "\n",
            "not found:Abisia\r\n",
            "\n",
            "not found:Abixah\r\n",
            "\n",
            "not found:Abner\r\n",
            "\n",
            "not found:Aborn\r\n",
            "\n",
            "not found:Abott\r\n",
            "\n",
            "not found:Abra\r\n",
            "\n",
            "8181\n",
            "not found:Abrahams\r\n",
            "\n",
            "not found:Abrahamsen\r\n",
            "\n",
            "not found:Abrahan\r\n",
            "\n",
            "not found:Abram\r\n",
            "\n",
            "not found:Abramo\r\n",
            "\n",
            "23063\n",
            "not found:Abramson\r\n",
            "\n",
            "not found:Abran\r\n",
            "\n",
            "not found:Abroms\r\n",
            "\n",
            "not found:Absa\r\n",
            "\n",
            "not found:Absalom\r\n",
            "\n",
            "not found:Abshier\r\n",
            "\n",
            "24766\n",
            "not found:Acalia\r\n",
            "\n",
            "not found:Accalia\r\n",
            "\n",
            "9078\n",
            "not found:Acey\r\n",
            "\n",
            "not found:Acherman\r\n",
            "\n",
            "23167\n",
            "not found:Achorn\r\n",
            "\n",
            "not found:Acie\r\n",
            "\n",
            "not found:Acima\r\n",
            "\n",
            "not found:Acker\r\n",
            "\n",
            "not found:Ackerley\r\n",
            "\n",
            "not found:Ackerman\r\n",
            "\n",
            "not found:Ackler\r\n",
            "\n",
            "not found:Ackley\r\n",
            "\n",
            "not found:Acquah\r\n",
            "\n",
            "not found:Acus\r\n",
            "\n",
            "4748\n",
            "15262\n",
            "not found:Adabel\r\n",
            "\n",
            "not found:Adabelle\r\n",
            "\n",
            "not found:Adachi\r\n",
            "\n",
            "not found:Adah\r\n",
            "\n",
            "not found:Adaha\r\n",
            "\n",
            "not found:Adai\r\n",
            "\n",
            "not found:Adaiha\r\n",
            "\n",
            "not found:Adair\r\n",
            "\n",
            "not found:Adal\r\n",
            "\n",
            "not found:Adala\r\n",
            "\n",
            "not found:Adalai\r\n",
            "\n",
            "not found:Adalard\r\n",
            "\n",
            "not found:Adalbert\r\n",
            "\n",
            "not found:Adalheid\r\n",
            "\n",
            "not found:Adali\r\n",
            "\n",
            "not found:Adalia\r\n",
            "\n",
            "not found:Adaliah\r\n",
            "\n",
            "not found:Adalie\r\n",
            "\n",
            "not found:Adaline\r\n",
            "\n",
            "not found:Adall\r\n",
            "\n",
            "not found:Adallard\r\n",
            "\n",
            "4205\n",
            "not found:Adama\r\n",
            "\n",
            "not found:Adamec\r\n",
            "\n",
            "not found:Adamek\r\n",
            "\n",
            "not found:Adamik\r\n",
            "\n",
            "not found:Adamina\r\n",
            "\n",
            "not found:Adaminah\r\n",
            "\n",
            "not found:Adamis\r\n",
            "\n",
            "not found:Adamo\r\n",
            "\n",
            "not found:Adamok\r\n",
            "\n",
            "5922\n",
            "not found:Adamsen\r\n",
            "\n",
            "not found:Adamski\r\n",
            "\n",
            "not found:Adamson\r\n",
            "\n",
            "not found:Adamsun\r\n",
            "\n",
            "not found:Adan\r\n",
            "\n",
            "not found:Adao\r\n",
            "\n",
            "not found:Adar\r\n",
            "\n",
            "not found:Adara\r\n",
            "\n",
            "not found:Adaurd\r\n",
            "\n",
            "not found:Aday\r\n",
            "\n",
            "not found:Adda\r\n",
            "\n",
            "not found:Addam\r\n",
            "\n",
            "not found:Addi\r\n",
            "\n",
            "not found:Addia\r\n",
            "\n",
            "not found:Addie\r\n",
            "\n",
            "not found:Addiego\r\n",
            "\n",
            "not found:Addiel\r\n",
            "\n",
            "not found:Addis\r\n",
            "\n",
            "18403\n",
            "not found:Addy\r\n",
            "\n",
            "not found:Ade\r\n",
            "\n",
            "not found:Adebayo\r\n",
            "\n",
            "not found:Adel\r\n",
            "\n",
            "not found:Adela\r\n",
            "\n",
            "not found:Adelaida\r\n",
            "\n",
            "7364\n",
            "not found:Adelaja\r\n",
            "\n",
            "not found:Adelbert\r\n",
            "\n",
            "17623\n",
            "not found:Adelheid\r\n",
            "\n",
            "not found:Adelia\r\n",
            "\n",
            "not found:Adelice\r\n",
            "\n",
            "not found:Adelina\r\n",
            "\n",
            "not found:Adelind\r\n",
            "\n",
            "not found:Adeline\r\n",
            "\n",
            "not found:Adella\r\n",
            "\n",
            "not found:Adelle\r\n",
            "\n",
            "not found:Adelpho\r\n",
            "\n",
            "not found:Adelric\r\n",
            "\n",
            "not found:Adena\r\n",
            "\n",
            "not found:Ader\r\n",
            "\n",
            "not found:Adest\r\n",
            "\n",
            "not found:Adey\r\n",
            "\n",
            "not found:Adham\r\n",
            "\n",
            "not found:Adhamh\r\n",
            "\n",
            "not found:Adhern\r\n",
            "\n",
            "27133\n",
            "not found:Adiana\r\n",
            "\n",
            "not found:Adiel\r\n",
            "\n",
            "not found:Adiell\r\n",
            "\n",
            "not found:Adigun\r\n",
            "\n",
            "not found:Adila\r\n",
            "\n",
            "not found:Adim\r\n",
            "\n",
            "not found:Adin\r\n",
            "\n",
            "not found:Adina\r\n",
            "\n",
            "not found:Adine\r\n",
            "\n",
            "not found:Adis\r\n",
            "\n",
            "not found:Adkins\r\n",
            "\n",
            "not found:Adlai\r\n",
            "\n",
            "not found:Adlar\r\n",
            "\n",
            "not found:Adlare\r\n",
            "\n",
            "not found:Adlay\r\n",
            "\n",
            "not found:Adlee\r\n",
            "\n",
            "not found:Adlei\r\n",
            "\n",
            "17969\n",
            "not found:Adley\r\n",
            "\n",
            "not found:Adna\r\n",
            "\n",
            "not found:Adnah\r\n",
            "\n",
            "not found:Adne\r\n",
            "\n",
            "not found:Adnopoz\r\n",
            "\n",
            "not found:Ado\r\n",
            "\n",
            "12500\n",
            "not found:Adolfo\r\n",
            "\n",
            "28564\n",
            "not found:Adolphe\r\n",
            "\n",
            "not found:Adolpho\r\n",
            "\n",
            "not found:Adolphus\r\n",
            "\n",
            "not found:Adon\r\n",
            "\n",
            "not found:Adonis\r\n",
            "\n",
            "not found:Adora\r\n",
            "\n",
            "not found:Adore\r\n",
            "\n",
            "not found:Adoree\r\n",
            "\n",
            "not found:Adorl\r\n",
            "\n",
            "not found:Adorne\r\n",
            "\n",
            "not found:Adrea\r\n",
            "\n",
            "not found:Adrell\r\n",
            "\n",
            "not found:Adria\r\n",
            "\n",
            "not found:Adriaens\r\n",
            "\n",
            "not found:Adrial\r\n",
            "\n",
            "7918\n",
            "not found:Adriana\r\n",
            "\n",
            "not found:Adriane\r\n",
            "\n",
            "not found:Adrianna\r\n",
            "\n",
            "not found:Adrianne\r\n",
            "\n",
            "not found:Adriano\r\n",
            "\n",
            "not found:Adriel\r\n",
            "\n",
            "not found:Adriell\r\n",
            "\n",
            "not found:Adrien\r\n",
            "\n",
            "not found:Adriena\r\n",
            "\n",
            "not found:Adriene\r\n",
            "\n",
            "not found:Adrienne\r\n",
            "\n",
            "not found:Adur\r\n",
            "\n",
            "not found:Aekerly\r\n",
            "\n",
            "not found:Aelber\r\n",
            "\n",
            "not found:Aenea\r\n",
            "\n",
            "not found:Aeneas\r\n",
            "\n",
            "not found:Aeneus\r\n",
            "\n",
            "not found:Aeniah\r\n",
            "\n",
            "not found:Aenneea\r\n",
            "\n",
            "not found:Aeriel\r\n",
            "\n",
            "not found:Aeriela\r\n",
            "\n",
            "not found:Aeriell\r\n",
            "\n",
            "not found:Affer\r\n",
            "\n",
            "not found:Affra\r\n",
            "\n",
            "not found:Affrica\r\n",
            "\n",
            "not found:Afra\r\n",
            "\n",
            "3088\n",
            "not found:Africah\r\n",
            "\n",
            "not found:Afrika\r\n",
            "\n",
            "not found:Afrikah\r\n",
            "\n",
            "not found:Afton\r\n",
            "\n",
            "12943\n",
            "not found:Agace\r\n",
            "\n",
            "not found:Agamemnon\r\n",
            "\n",
            "not found:Agan\r\n",
            "\n",
            "not found:Agata\r\n",
            "\n",
            "not found:Agate\r\n",
            "\n",
            "23863\n",
            "not found:Agathe\r\n",
            "\n",
            "not found:Agathy\r\n",
            "\n",
            "not found:Agbogla\r\n",
            "\n",
            "not found:Agee\r\n",
            "\n",
            "not found:Aggappe\r\n",
            "\n",
            "not found:Aggappera\r\n",
            "\n",
            "not found:Aggappora\r\n",
            "\n",
            "not found:Aggarwal\r\n",
            "\n",
            "not found:Aggi\r\n",
            "\n",
            "not found:Aggie\r\n",
            "\n",
            "not found:Aggri\r\n",
            "\n",
            "not found:Aggy\r\n",
            "\n",
            "not found:Agle\r\n",
            "\n",
            "not found:Agler\r\n",
            "\n",
            "not found:Agna\r\n",
            "\n",
            "not found:Agnella\r\n",
            "\n",
            "11166\n",
            "not found:Agnese\r\n",
            "\n",
            "not found:Agnesse\r\n",
            "\n",
            "not found:Agneta\r\n",
            "\n",
            "not found:Agnew\r\n",
            "\n",
            "not found:Agnola\r\n",
            "\n",
            "not found:Agostino\r\n",
            "\n",
            "not found:Agosto\r\n",
            "\n",
            "not found:Agretha\r\n",
            "\n",
            "not found:Agripina\r\n",
            "\n",
            "not found:Agrippina\r\n",
            "\n",
            "not found:Aguayo\r\n",
            "\n",
            "not found:Agueda\r\n",
            "\n",
            "not found:Aguie\r\n",
            "\n",
            "not found:Aguste\r\n",
            "\n",
            "26889\n",
            "not found:Ahab\r\n",
            "\n",
            "not found:Aharon\r\n",
            "\n",
            "not found:Ahasuerus\r\n",
            "\n",
            "not found:Ahders\r\n",
            "\n",
            "not found:Ahearn\r\n",
            "\n",
            "not found:Ahern\r\n",
            "\n",
            "18347\n",
            "not found:Ahlgren\r\n",
            "\n",
            "10781\n",
            "not found:Ahmar\r\n",
            "\n",
            "10208\n",
            "not found:Ahola\r\n",
            "\n",
            "not found:Aholah\r\n",
            "\n",
            "not found:Aholla\r\n",
            "\n",
            "not found:Ahoufe\r\n",
            "\n",
            "not found:Ahouh\r\n",
            "\n",
            "not found:Ahrendt\r\n",
            "\n",
            "not found:Ahrens\r\n",
            "\n",
            "not found:Ahron\r\n",
            "\n",
            "not found:Aia\r\n",
            "\n",
            "not found:Aida\r\n",
            "\n",
            "12643\n",
            "15086\n",
            "not found:Aiello\r\n",
            "\n",
            "not found:Aigneis\r\n",
            "\n",
            "not found:Aiken\r\n",
            "\n",
            "not found:Aila\r\n",
            "\n",
            "not found:Ailbert\r\n",
            "\n",
            "not found:Aile\r\n",
            "\n",
            "not found:Ailee\r\n",
            "\n",
            "not found:Aileen\r\n",
            "\n",
            "not found:Ailene\r\n",
            "\n",
            "not found:Ailey\r\n",
            "\n",
            "not found:Aili\r\n",
            "\n",
            "not found:Ailin\r\n",
            "\n",
            "not found:Ailina\r\n",
            "\n",
            "not found:Ailis\r\n",
            "\n",
            "not found:Ailsa\r\n",
            "\n",
            "not found:Ailssa\r\n",
            "\n",
            "not found:Ailsun\r\n",
            "\n",
            "not found:Ailyn\r\n",
            "\n",
            "not found:Aime\r\n",
            "\n",
            "23551\n",
            "not found:Aimil\r\n",
            "\n",
            "not found:Aimo\r\n",
            "\n",
            "not found:Aindrea\r\n",
            "\n",
            "not found:Ainslee\r\n",
            "\n",
            "not found:Ainsley\r\n",
            "\n",
            "not found:Ainslie\r\n",
            "\n",
            "not found:Ainsworth\r\n",
            "\n",
            "not found:Airel\r\n",
            "\n",
            "9149\n",
            "not found:Airla\r\n",
            "\n",
            "not found:Airlee\r\n",
            "\n",
            "not found:Airlia\r\n",
            "\n",
            "not found:Airliah\r\n",
            "\n",
            "not found:Airlie\r\n",
            "\n",
            "not found:Aisha\r\n",
            "\n",
            "not found:Ajani\r\n",
            "\n",
            "18176\n",
            "not found:Ajay\r\n",
            "\n",
            "not found:Ajit\r\n",
            "\n",
            "not found:Akanke\r\n",
            "\n",
            "not found:Akel\r\n",
            "\n",
            "not found:Akela\r\n",
            "\n",
            "not found:Aker\r\n",
            "\n",
            "not found:Akerboom\r\n",
            "\n",
            "not found:Akerley\r\n",
            "\n",
            "not found:Akers\r\n",
            "\n",
            "not found:Akeyla\r\n",
            "\n",
            "not found:Akeylah\r\n",
            "\n",
            "not found:Akili\r\n",
            "\n",
            "not found:Akim\r\n",
            "\n",
            "17793\n",
            "not found:Akins\r\n",
            "\n",
            "21616\n",
            "not found:Aklog\r\n",
            "\n",
            "not found:Aksel\r\n",
            "\n",
            "not found:Aksoyn\r\n",
            "\n",
            "2632\n",
            "not found:Alabaster\r\n",
            "\n",
            "not found:Alage\r\n",
            "\n",
            "15654\n",
            "not found:Alaine\r\n",
            "\n",
            "not found:Alair\r\n",
            "\n",
            "not found:Alake\r\n",
            "\n",
            "not found:Alameda\r\n",
            "\n",
            "5070\n",
            "not found:Alana\r\n",
            "\n",
            "not found:Alanah\r\n",
            "\n",
            "not found:Aland\r\n",
            "\n",
            "not found:Alane\r\n",
            "\n",
            "not found:Alanna\r\n",
            "\n",
            "not found:Alano\r\n",
            "\n",
            "not found:Alansen\r\n",
            "\n",
            "not found:Alanson\r\n",
            "\n",
            "not found:Alard\r\n",
            "\n",
            "not found:Alaric\r\n",
            "\n",
            "not found:Alarice\r\n",
            "\n",
            "not found:Alarick\r\n",
            "\n",
            "not found:Alarise\r\n",
            "\n",
            "not found:Alasdair\r\n",
            "\n",
            "not found:Alastair\r\n",
            "\n",
            "not found:Alasteir\r\n",
            "\n",
            "not found:Alaster\r\n",
            "\n",
            "not found:Alatea\r\n",
            "\n",
            "not found:Alathia\r\n",
            "\n",
            "not found:Alayne\r\n",
            "\n",
            "18255\n",
            "not found:Alban\r\n",
            "\n",
            "not found:Albarran\r\n",
            "\n",
            "not found:Albemarle\r\n",
            "\n",
            "not found:Alben\r\n",
            "\n",
            "not found:Alber\r\n",
            "\n",
            "not found:Alberic\r\n",
            "\n",
            "not found:Alberik\r\n",
            "\n",
            "not found:Albers\r\n",
            "\n",
            "4789\n",
            "7649\n",
            "not found:Albertina\r\n",
            "\n",
            "not found:Albertine\r\n",
            "\n",
            "12007\n",
            "not found:Albertson\r\n",
            "\n",
            "not found:Albie\r\n",
            "\n",
            "not found:Albin\r\n",
            "\n",
            "not found:Albina\r\n",
            "\n",
            "13392\n",
            "not found:Alboran\r\n",
            "\n",
            "25542\n",
            "not found:Albric\r\n",
            "\n",
            "not found:Albright\r\n",
            "\n",
            "not found:Albur\r\n",
            "\n",
            "not found:Alburg\r\n",
            "\n",
            "not found:Alburga\r\n",
            "\n",
            "not found:Alby\r\n",
            "\n",
            "not found:Alcina\r\n",
            "\n",
            "not found:Alcine\r\n",
            "\n",
            "not found:Alcinia\r\n",
            "\n",
            "not found:Alcock\r\n",
            "\n",
            "not found:Alcot\r\n",
            "\n",
            "not found:Alcott\r\n",
            "\n",
            "not found:Alcus\r\n",
            "\n",
            "not found:Alda\r\n",
            "\n",
            "not found:Aldarcie\r\n",
            "\n",
            "not found:Aldarcy\r\n",
            "\n",
            "not found:Aldas\r\n",
            "\n",
            "not found:Alded\r\n",
            "\n",
            "not found:Alden\r\n",
            "\n",
            "not found:Aldercy\r\n",
            "\n",
            "18977\n",
            "not found:Alderson\r\n",
            "\n",
            "not found:Aldin\r\n",
            "\n",
            "not found:Aldis\r\n",
            "\n",
            "28163\n",
            "not found:Aldon\r\n",
            "\n",
            "not found:Aldora\r\n",
            "\n",
            "not found:Aldos\r\n",
            "\n",
            "not found:Aldous\r\n",
            "\n",
            "not found:Aldred\r\n",
            "\n",
            "not found:Aldredge\r\n",
            "\n",
            "not found:Aldric\r\n",
            "\n",
            "not found:Aldrich\r\n",
            "\n",
            "not found:Aldridge\r\n",
            "\n",
            "not found:Alduino\r\n",
            "\n",
            "not found:Aldus\r\n",
            "\n",
            "not found:Aldwin\r\n",
            "\n",
            "not found:Aldwon\r\n",
            "\n",
            "9752\n",
            "not found:Alecia\r\n",
            "\n",
            "not found:Aleck\r\n",
            "\n",
            "not found:Aleda\r\n",
            "\n",
            "not found:Aleece\r\n",
            "\n",
            "not found:Aleedis\r\n",
            "\n",
            "not found:Aleen\r\n",
            "\n",
            "not found:Aleetha\r\n",
            "\n",
            "not found:Alegre\r\n",
            "\n",
            "not found:Alejandra\r\n",
            "\n",
            "not found:Alejandrina\r\n",
            "\n",
            "16810\n",
            "not found:Alejo\r\n",
            "\n",
            "not found:Alejoa\r\n",
            "\n",
            "not found:Alek\r\n",
            "\n",
            "24020\n",
            "not found:Alena\r\n",
            "\n",
            "not found:Alene\r\n",
            "\n",
            "not found:Alenson\r\n",
            "\n",
            "not found:Aleras\r\n",
            "\n",
            "not found:Aleris\r\n",
            "\n",
            "not found:Aleron\r\n",
            "\n",
            "not found:Alesandrini\r\n",
            "\n",
            "not found:Alessandra\r\n",
            "\n",
            "17956\n",
            "not found:Aleta\r\n",
            "\n",
            "not found:Aletha\r\n",
            "\n",
            "not found:Alethea\r\n",
            "\n",
            "not found:Alethia\r\n",
            "\n",
            "not found:Aletta\r\n",
            "\n",
            "4074\n",
            "24969\n",
            "3656\n",
            "not found:Alexandr\r\n",
            "\n",
            "10481\n",
            "16971\n",
            "10297\n",
            "not found:Alexandrina\r\n",
            "\n",
            "not found:Alexandro\r\n",
            "\n",
            "not found:Alexandros\r\n",
            "\n",
            "21219\n",
            "not found:Alexi\r\n",
            "\n",
            "21683\n",
            "not found:Alexina\r\n",
            "\n",
            "not found:Alexine\r\n",
            "\n",
            "not found:Alexio\r\n",
            "\n",
            "13573\n",
            "not found:Aley\r\n",
            "\n",
            "not found:Aleydis\r\n",
            "\n",
            "24493\n",
            "not found:Alfeus\r\n",
            "\n",
            "not found:Alfi\r\n",
            "\n",
            "not found:Alfie\r\n",
            "\n",
            "not found:Alfons\r\n",
            "\n",
            "not found:Alfonse\r\n",
            "\n",
            "13591\n",
            "not found:Alfonzo\r\n",
            "\n",
            "not found:Alford\r\n",
            "\n",
            "6152\n",
            "not found:Alfreda\r\n",
            "\n",
            "19423\n",
            "not found:Alfy\r\n",
            "\n",
            "not found:Algar\r\n",
            "\n",
            "not found:Alger\r\n",
            "\n",
            "not found:Algernon\r\n",
            "\n",
            "not found:Algie\r\n",
            "\n",
            "not found:Alguire\r\n",
            "\n",
            "not found:Algy\r\n",
            "\n",
            "4862\n",
            "not found:Alia\r\n",
            "\n",
            "not found:Aliber\r\n",
            "\n",
            "not found:Alic\r\n",
            "\n",
            "not found:Alica\r\n",
            "\n",
            "5650\n",
            "not found:Alicea\r\n",
            "\n",
            "15935\n",
            "not found:Alick\r\n",
            "\n",
            "not found:Alida\r\n",
            "\n",
            "not found:Alidia\r\n",
            "\n",
            "not found:Alidis\r\n",
            "\n",
            "not found:Alidus\r\n",
            "\n",
            "not found:Alie\r\n",
            "\n",
            "not found:Alika\r\n",
            "\n",
            "not found:Alikee\r\n",
            "\n",
            "not found:Alina\r\n",
            "\n",
            "not found:Aline\r\n",
            "\n",
            "not found:Alinna\r\n",
            "\n",
            "not found:Alis\r\n",
            "\n",
            "not found:Alisa\r\n",
            "\n",
            "not found:Alisan\r\n",
            "\n",
            "not found:Alisander\r\n",
            "\n",
            "not found:Alisen\r\n",
            "\n",
            "not found:Alisha\r\n",
            "\n",
            "not found:Alisia\r\n",
            "\n",
            "12684\n",
            "not found:Alissa\r\n",
            "\n",
            "23752\n",
            "not found:Alister\r\n",
            "\n",
            "not found:Alisun\r\n",
            "\n",
            "not found:Alita\r\n",
            "\n",
            "not found:Alitha\r\n",
            "\n",
            "not found:Alithea\r\n",
            "\n",
            "not found:Alithia\r\n",
            "\n",
            "not found:Alitta\r\n",
            "\n",
            "not found:Alius\r\n",
            "\n",
            "not found:Alix\r\n",
            "\n",
            "not found:Aliza\r\n",
            "\n",
            "25699\n",
            "not found:Allain\r\n",
            "\n",
            "8926\n",
            "not found:Allana\r\n",
            "\n",
            "not found:Allanson\r\n",
            "\n",
            "not found:Allard\r\n",
            "\n",
            "not found:Allare\r\n",
            "\n",
            "not found:Allayne\r\n",
            "\n",
            "not found:Allbee\r\n",
            "\n",
            "not found:Allcot\r\n",
            "\n",
            "not found:Alleen\r\n",
            "\n",
            "not found:Allegra\r\n",
            "\n",
            "5297\n",
            "not found:Allene\r\n",
            "\n",
            "not found:Alleras\r\n",
            "\n",
            "not found:Allerie\r\n",
            "\n",
            "not found:Alleris\r\n",
            "\n",
            "not found:Allerus\r\n",
            "\n",
            "8975\n",
            "not found:Alleyn\r\n",
            "\n",
            "not found:Alleyne\r\n",
            "\n",
            "not found:Alli\r\n",
            "\n",
            "not found:Allianora\r\n",
            "\n",
            "not found:Alliber\r\n",
            "\n",
            "16944\n",
            "not found:Allin\r\n",
            "\n",
            "not found:Allina\r\n",
            "\n",
            "not found:Allis\r\n",
            "\n",
            "not found:Allisan\r\n",
            "\n",
            "10786\n",
            "not found:Allissa\r\n",
            "\n",
            "not found:Allista\r\n",
            "\n",
            "not found:Allister\r\n",
            "\n",
            "not found:Allistir\r\n",
            "\n",
            "not found:Allix\r\n",
            "\n",
            "not found:Allmon\r\n",
            "\n",
            "not found:Allred\r\n",
            "\n",
            "not found:Allrud\r\n",
            "\n",
            "not found:Allsopp\r\n",
            "\n",
            "not found:Allsun\r\n",
            "\n",
            "not found:Allveta\r\n",
            "\n",
            "not found:Allwein\r\n",
            "\n",
            "not found:Allx\r\n",
            "\n",
            "9698\n",
            "not found:Allyce\r\n",
            "\n",
            "not found:Allyn\r\n",
            "\n",
            "not found:Allys\r\n",
            "\n",
            "not found:Allyson\r\n",
            "\n",
            "11346\n",
            "not found:Almallah\r\n",
            "\n",
            "not found:Almeda\r\n",
            "\n",
            "not found:Almeeta\r\n",
            "\n",
            "29555\n",
            "not found:Almena\r\n",
            "\n",
            "not found:Almeria\r\n",
            "\n",
            "not found:Almeta\r\n",
            "\n",
            "not found:Almira\r\n",
            "\n",
            "not found:Almire\r\n",
            "\n",
            "not found:Almita\r\n",
            "\n",
            "26011\n",
            "not found:Almund\r\n",
            "\n",
            "not found:Alo\r\n",
            "\n",
            "not found:Alodee\r\n",
            "\n",
            "not found:Alodi\r\n",
            "\n",
            "not found:Alodie\r\n",
            "\n",
            "not found:Aloin\r\n",
            "\n",
            "not found:Aloise\r\n",
            "\n",
            "not found:Aloisia\r\n",
            "\n",
            "not found:Aloisius\r\n",
            "\n",
            "not found:Aloke\r\n",
            "\n",
            "not found:Alon\r\n",
            "\n",
            "17649\n",
            "not found:Alonzo\r\n",
            "\n",
            "not found:Aloysia\r\n",
            "\n",
            "not found:Aloysius\r\n",
            "\n",
            "not found:Alper\r\n",
            "\n",
            "not found:Alpers\r\n",
            "\n",
            "not found:Alpert\r\n",
            "\n",
            "not found:Alphard\r\n",
            "\n",
            "not found:Alpheus\r\n",
            "\n",
            "not found:Alphonsa\r\n",
            "\n",
            "not found:Alphonse\r\n",
            "\n",
            "not found:Alphonsine\r\n",
            "\n",
            "not found:Alphonso\r\n",
            "\n",
            "not found:AlrZc\r\n",
            "\n",
            "not found:Alric\r\n",
            "\n",
            "not found:Alrich\r\n",
            "\n",
            "not found:Alrick\r\n",
            "\n",
            "not found:Alroi\r\n",
            "\n",
            "not found:Alroy\r\n",
            "\n",
            "2036\n",
            "not found:Alston\r\n",
            "\n",
            "not found:Alsworth\r\n",
            "\n",
            "23647\n",
            "not found:Altaf\r\n",
            "\n",
            "not found:Alten\r\n",
            "\n",
            "not found:Althea\r\n",
            "\n",
            "not found:Althee\r\n",
            "\n",
            "not found:Altheta\r\n",
            "\n",
            "not found:Altis\r\n",
            "\n",
            "not found:Altman\r\n",
            "\n",
            "26374\n",
            "not found:Aluin\r\n",
            "\n",
            "not found:Aluino\r\n",
            "\n",
            "not found:Alurd\r\n",
            "\n",
            "not found:Alurta\r\n",
            "\n",
            "not found:Alva\r\n",
            "\n",
            "not found:Alvan\r\n",
            "\n",
            "not found:Alvar\r\n",
            "\n",
            "16309\n",
            "not found:Alver\r\n",
            "\n",
            "not found:Alvera\r\n",
            "\n",
            "not found:Alverson\r\n",
            "\n",
            "not found:Alverta\r\n",
            "\n",
            "not found:Alves\r\n",
            "\n",
            "not found:Alveta\r\n",
            "\n",
            "not found:Alviani\r\n",
            "\n",
            "not found:Alvie\r\n",
            "\n",
            "17348\n",
            "not found:Alvina\r\n",
            "\n",
            "not found:Alvinia\r\n",
            "\n",
            "not found:Alvira\r\n",
            "\n",
            "not found:Alvis\r\n",
            "\n",
            "not found:Alvita\r\n",
            "\n",
            "not found:Alvord\r\n",
            "\n",
            "not found:Alvy\r\n",
            "\n",
            "not found:Alwin\r\n",
            "\n",
            "not found:Alwitt\r\n",
            "\n",
            "not found:Alwyn\r\n",
            "\n",
            "not found:Alyce\r\n",
            "\n",
            "not found:Alyda\r\n",
            "\n",
            "not found:Alyose\r\n",
            "\n",
            "not found:Alyosha\r\n",
            "\n",
            "not found:Alys\r\n",
            "\n",
            "not found:Alysa\r\n",
            "\n",
            "not found:Alyse\r\n",
            "\n",
            "not found:Alysia\r\n",
            "\n",
            "not found:Alyson\r\n",
            "\n",
            "not found:Alysoun\r\n",
            "\n",
            "not found:Alyss\r\n",
            "\n",
            "26442\n",
            "not found:Alyworth\r\n",
            "\n",
            "25933\n",
            "not found:Amabel\r\n",
            "\n",
            "not found:Amabelle\r\n",
            "\n",
            "not found:Amabil\r\n",
            "\n",
            "not found:Amadas\r\n",
            "\n",
            "not found:Amadeo\r\n",
            "\n",
            "27185\n",
            "not found:Amadis\r\n",
            "\n",
            "not found:Amado\r\n",
            "\n",
            "not found:Amador\r\n",
            "\n",
            "not found:Amadus\r\n",
            "\n",
            "not found:Amal\r\n",
            "\n",
            "not found:Amalbena\r\n",
            "\n",
            "not found:Amalberga\r\n",
            "\n",
            "not found:Amalbergas\r\n",
            "\n",
            "not found:Amalburga\r\n",
            "\n",
            "not found:Amalea\r\n",
            "\n",
            "not found:Amalee\r\n",
            "\n",
            "not found:Amaleta\r\n",
            "\n",
            "not found:Amalia\r\n",
            "\n",
            "not found:Amalie\r\n",
            "\n",
            "not found:Amalita\r\n",
            "\n",
            "not found:Amalle\r\n",
            "\n",
            "not found:Aman\r\n",
            "\n",
            "not found:Amand\r\n",
            "\n",
            "8282\n",
            "not found:Amandi\r\n",
            "\n",
            "not found:Amandie\r\n",
            "\n",
            "not found:Amando\r\n",
            "\n",
            "not found:Amandy\r\n",
            "\n",
            "not found:Amann\r\n",
            "\n",
            "23204\n",
            "28599\n",
            "not found:Amaral\r\n",
            "\n",
            "not found:Amaras\r\n",
            "\n",
            "not found:Amarette\r\n",
            "\n",
            "not found:Amargo\r\n",
            "\n",
            "not found:Amari\r\n",
            "\n",
            "not found:Amarillas\r\n",
            "\n",
            "not found:Amarillis\r\n",
            "\n",
            "not found:Amaris\r\n",
            "\n",
            "not found:Amary\r\n",
            "\n",
            "not found:Amaryl\r\n",
            "\n",
            "not found:Amaryllis\r\n",
            "\n",
            "not found:Amasa\r\n",
            "\n",
            "not found:Amata\r\n",
            "\n",
            "not found:Amathist\r\n",
            "\n",
            "not found:Amathiste\r\n",
            "\n",
            "not found:Amati\r\n",
            "\n",
            "not found:Amato\r\n",
            "\n",
            "not found:Amatruda\r\n",
            "\n",
            "not found:Amaty\r\n",
            "\n",
            "8994\n",
            "not found:Amberly\r\n",
            "\n",
            "not found:Ambert\r\n",
            "\n",
            "not found:Ambie\r\n",
            "\n",
            "not found:Amble\r\n",
            "\n",
            "not found:Ambler\r\n",
            "\n",
            "not found:Ambrogino\r\n",
            "\n",
            "not found:Ambrogio\r\n",
            "\n",
            "not found:Ambros\r\n",
            "\n",
            "not found:Ambrosane\r\n",
            "\n",
            "15675\n",
            "not found:Ambrosi\r\n",
            "\n",
            "not found:Ambrosia\r\n",
            "\n",
            "not found:Ambrosine\r\n",
            "\n",
            "not found:Ambrosio\r\n",
            "\n",
            "not found:Ambrosius\r\n",
            "\n",
            "not found:Ambur\r\n",
            "\n",
            "not found:Amby\r\n",
            "\n",
            "not found:Ame\r\n",
            "\n",
            "not found:Amedeo\r\n",
            "\n",
            "11556\n",
            "25285\n",
            "not found:Amelina\r\n",
            "\n",
            "not found:Ameline\r\n",
            "\n",
            "not found:Amelita\r\n",
            "\n",
            "not found:Amena\r\n",
            "\n",
            "27950\n",
            "not found:Amerigo\r\n",
            "\n",
            "not found:Amero\r\n",
            "\n",
            "not found:Amersham\r\n",
            "\n",
            "not found:Amery\r\n",
            "\n",
            "19900\n",
            "not found:Amethist\r\n",
            "\n",
            "not found:Amethyst\r\n",
            "\n",
            "26445\n",
            "not found:Amias\r\n",
            "\n",
            "not found:Amice\r\n",
            "\n",
            "not found:Amick\r\n",
            "\n",
            "not found:Amie\r\n",
            "\n",
            "not found:Amiel\r\n",
            "\n",
            "not found:Amieva\r\n",
            "\n",
            "not found:Amii\r\n",
            "\n",
            "not found:Amil\r\n",
            "\n",
            "24432\n",
            "not found:Aminta\r\n",
            "\n",
            "18904\n",
            "not found:Amitie\r\n",
            "\n",
            "not found:Amity\r\n",
            "\n",
            "not found:Amling\r\n",
            "\n",
            "not found:Ammadas\r\n",
            "\n",
            "not found:Ammadis\r\n",
            "\n",
            "not found:Ammamaria\r\n",
            "\n",
            "not found:Ammann\r\n",
            "\n",
            "not found:Ammon\r\n",
            "\n",
            "not found:Amoakuh\r\n",
            "\n",
            "16095\n",
            "not found:Amora\r\n",
            "\n",
            "not found:Amoreta\r\n",
            "\n",
            "not found:Amorete\r\n",
            "\n",
            "not found:Amorette\r\n",
            "\n",
            "not found:Amorita\r\n",
            "\n",
            "not found:Amoritta\r\n",
            "\n",
            "not found:Amory\r\n",
            "\n",
            "13744\n",
            "not found:Amr\r\n",
            "\n",
            "not found:Amrita\r\n",
            "\n",
            "not found:Amsden\r\n",
            "\n",
            "not found:Amund\r\n",
            "\n",
            "6864\n",
            "not found:Amyas\r\n",
            "\n",
            "not found:Amye\r\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "UnicodeDecodeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mUnicodeDecodeError\u001b[0m                        Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-65-889fbd68481d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvocab\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m   \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mUnicodeDecodeError\u001b[0m: 'utf-8' codec can't decode byte 0x82 in position 2: invalid start byte",
            "\nDuring handling of the above exception, another exception occurred:\n",
            "\u001b[0;31mUnicodeDecodeError\u001b[0m                        Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-65-889fbd68481d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvocab\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m   \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m       \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"not found:\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdecode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mUnicodeDecodeError\u001b[0m: 'utf-8' codec can't decode byte 0x82 in position 2: invalid start byte"
          ]
        }
      ]
    }
  ]
}